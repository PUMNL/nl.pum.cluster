<?php
require_once 'CRM/Core/Form.php';
/**
 * Form controller class
 *
 * @see http://wiki.civicrm.org/confluence/display/CRMDOC43/QuickForm+Reference
 */
class CRM_Cluster_Form_ClusterLink extends CRM_Core_Form {
  protected $cluster;
  protected $id;

  function preProcess() {
    if(!empty($_GET['id'])){
      $this->id = $_GET['id'];//CRM_Utils_Request::retrieve('id', 'Integer', CRM_core_DAO::$_nullObject, TRUE);
    }

    if(!empty($this->id)){
      $params['id'] = $this->id;
      $clusters = CRM_Cluster_BAO_Cluster::getValues($params);
      $this->cluster = $clusters[$this->id];
    }
    parent::preProcess(); // TODO: Change the autogenerated stub
  }

  function setDefaultValues() {
    return $this->cluster;
  }

  public function buildQuickForm() {
    $this->addFormElements();
    parent::buildQuickForm();
  }

  public function postProcess() {
    $values = $this->exportValues();

    if(!empty($values['id'])){
      $this->cluster['id'] = $values['id'];
    }

    $this->cluster['label'] = $values['label'];
    $this->cluster['name'] = $values['name'];
    $this->cluster['is_active'] = $values['is_active'];

    CRM_Cluster_BAO_Cluster::add($this->cluster);

    CRM_Utils_System::redirect('clusterlist?reset=1');

    parent::postProcess();
  }
  /**
   * Get the fields/elements defined in this form.
   *
   * @return array (string)
   */
  public function getRenderableElementNames() {
    // The _elements list includes some items which should not be
    // auto-rendered in the loop -- such as "qfKey" and "buttons".  These
    // items don't have labels.  We'll identify renderable by filtering on
    // the 'label'.
    $elementNames = array();
    foreach ($this->_elements as $element) {
      /** @var HTML_QuickForm_Element $element */
      $label = $element->getLabel();
      if (!empty($label)) {
        $elementNames[] = $element->getName();
      }
    }
    return $elementNames;
  }

  /**
   * Function to add form elements
   *
   * @access protected
   */
  protected function addFormElements() {
    $parentList = CRM_Cluster_Utils::getList(1);
    $this->add('hidden', 'id', ts('Cluster ID'));
    // add form elements
    $this->add('text', 'name', ts('Name'), array('size' => 128), FALSE);
    $this->add('text', 'label', ts('Label'), array('size' => 128), TRUE);
    $this->add('checkbox', 'is_active', ts('Is Active'), array(), FALSE);

    $this->addButtons(array(
      array('type' => 'next', 'name' => ts('Save'), 'isDefault' => TRUE,),
      array('type' => 'cancel', 'name' => ts('Cancel'))));
    // export form elements
    $this->assign('elementNames', $this->getRenderableElementNames());
  }

  /**
   * Method to get select list of possible parent segments
   *
   * @access protected
   * @return array
   */
  protected function getParentList() {
    $parentList = array('- select -') && CRM_Cluster_Utils::getList(1);
    asort($parentList);
    return $parentList;
  }
}