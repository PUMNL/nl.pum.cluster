<?php
require_once 'CRM/Core/Form.php';
/**
 * Form controller class
 *
 * @see http://wiki.civicrm.org/confluence/display/CRMDOC43/QuickForm+Reference
 */
class CRM_Cluster_Form_EntityCluster extends CRM_Core_Form {
  protected $entityCluster;
  protected $entity_id;
  protected $entity_type;
  protected $cluster_id;
  protected $cid;

  function preProcess() {
    $entity_cluster_id = CRM_Utils_Request::retrieve('id', 'Integer');

    if(!empty($entity_cluster_id)){
      $this->entity_id = $entity_cluster_id;
    } else if (!empty($_GET['id'])){
      $this->entity_id = $_GET['id'];
    }

    if(!empty($this->entity_id)){
      $params = array(
        'version' => 3,
        'sequential' => 1,
        'id' => $this->entity_id,
      );
      $result = civicrm_api('EntityCluster', 'get', $params);
      if(count($result['values']) == 1) {
        foreach($result['values'] as $cluster) {
          $params2['id'] = $this->entity_id;
          $clusters = CRM_Cluster_BAO_EntityCluster::getValues($params2);
          $this->entityCluster = $clusters[$this->entity_id];
        }
      }
    }

    parent::preProcess(); // TODO: Change the autogenerated stub
  }

  public function setDefaultValues() {
    $defaultValues = array();
    $this->entity_id = CRM_Utils_Request::retrieve('id', 'Integer');
    $params['id'] = $this->entity_id;
    $clusters = CRM_Cluster_BAO_EntityCluster::getValues($params);

    $defaultValues['entity_id'] = $clusters[$this->entity_id]['entity_id'];
    $defaultValues['entity_type'] = $clusters[$this->entity_id]['entity_type'];
    $defaultValues['cluster'] = $clusters[$this->entity_id]['cluster_id'];

    return $defaultValues;
  }

  public function buildQuickForm() {
    $this->addFormElements();
    parent::buildQuickForm();
  }

  public function postProcess() {
    $values = $this->exportValues();

    $url_parameters = explode('?',$_SERVER['HTTP_REFERER']);
    $url_parameters2 = explode('&',$url_parameters[1]);
    $url_parameters3 = array();

    foreach($url_parameters2 as $key => $parameter) {
      $current_par = explode('=',$parameter);
      $url_parameters3[$current_par[0]] = $current_par[1];
    }

    $this->entityCluster['id'] = (int)$this->_submitValues['id'];
    $this->entityCluster['entity_id'] = (int)$url_parameters3['case_id'];
    $this->entityCluster['cid'] = (int)$this->_submitValues['cid'];
    $this->entityCluster['entity_type'] = $this->_submitValues['entity_type'];
    $this->entityCluster['cluster_id'] = (int)$this->_submitValues['cluster'];

    if($this->entityCluster['entity_type'] == 'case') {
      //Always add the entry so that it is always visible that it is a decision not to assign a cluster to the entity
      CRM_Cluster_BAO_EntityCluster::add($this->entityCluster);
    }

    if($_SERVER['REQUEST_URI'] == '/civicrm/entitycluster/edit'){
      CRM_Utils_System::redirect(CRM_Utils_System::url('/civicrm/contact/view/case', 'reset=1&action=view&id='.$url_parameters3['case_id'].'&cid='.$url_parameters3['cid'].'&context='.$url_parameters3['entity_type'],TRUE));
    } else {
      CRM_Utils_System::redirect(CRM_Utils_System::url('/civicrm/clusterlist/clusterlist','reset=1',TRUE));
    }

    parent::postProcess();
  }
  /**
   * Get the fields/elements defined in this form.
   *
   * @return array (string)
   */
  public function getRenderableElementNames() {
    // The _elements list includes some items which should not be
    // auto-rendered in the loop -- such as "qfKey" and "buttons".  These
    // items don't have labels.  We'll identify renderable by filtering on
    // the 'label'.
    $elementNames = array();
    foreach ($this->_elements as $element) {
      /** @var HTML_QuickForm_Element $element */
      $label = $element->getLabel();
      if (!empty($label)) {
        $elementNames[] = $element->getName();
      }
    }
    return $elementNames;
  }

  /**
   * Function to add form elements
   *
   * @access protected
   */
  protected function addFormElements() {
    $url_parameters = explode('?',$_SERVER['HTTP_REFERER']);
    $url_parameters2 = explode('&',$url_parameters[1]);
    $url_parameters_referer = array();

    foreach($url_parameters2 as $key => $parameter) {
      $current_par = explode('=',$parameter);
      $url_parameters_referer[$current_par[0]] = $current_par[1];
    }

    $parentList = $this->getParentList($_GET['entity_type'],$url_parameters_referer['id']);

    if(!empty($this->entity_id)){
      $this->add('hidden', 'id', $this->entity_id);
    }
    if(!empty($_GET['cid'])){
      $this->add('hidden', 'cid', $_GET['cid']);
    }
    if(!empty($_GET['entity_type'])){
      $this->add('hidden', 'entity_type', $_GET['entity_type']);
    }
    // add form elements
    $this->add('select', 'cluster', ts('Cluster'), array("- no cluster -")+$parentList,0,1);

    $this->addButtons(array(
      array('type' => 'next', 'name' => ts('Save'), 'isDefault' => TRUE),
      array('type' => 'cancel', 'name' => ts('Cancel'))
    ));
    // export form elements
    $this->assign('elementNames', $this->getRenderableElementNames());
  }

  /**
   * Method to get select list of possible parent segments
   *
   * @access protected
   * @return array
   */
  protected function getParentList($entity_type, $entity_id) {
    $parentList = array();
    if($entity_type=='case') {
      $url_parameters = explode('?',$_SERVER['HTTP_REFERER']);
      $url_parameters2 = explode('&',$url_parameters[1]);
      $url_parameters3 = array();

      foreach($url_parameters2 as $key => $parameter) {
        $current_par = explode('=',$parameter);
        $url_parameters3[$current_par[0]] = $current_par[1];
      }

      $params = array(
        'version' => 3,
        'sequential' => 1,
        'id' => $url_parameters3['id'],
      );
      $result = civicrm_api('Case', 'get', $params);

      $client_id = '';
      foreach($result['values'] as $key => $value){
        if(empty($client_id) && !empty($value['client_id'][1])){
          $client_id = $value['client_id'][1];
        }
      }

      $country_id = '';
      if(!empty($client_id)) {
        $params = array(
          'version' => 3,
          'sequential' => 1,
          'contact_id' => $client_id,
          'return' => 'country,contact_type,contact_sub_type',
        );
        $result = civicrm_api('Contact', 'get', $params);

        foreach($result['values'] as $key => $value){
          if(!empty($value['country_id'])){
            $country_id = $value['country_id'];
          }
        }

        if (empty($country_id)) {
          foreach($result['values'] as $key => $value) {
            if (is_array($result['values'][$key]['contact_sub_type']) && in_array('Country',$result['values'][$key]['contact_sub_type'])) {
              $country_id_query = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_value_country WHERE entity_id = '".$value['contact_id']."'");
              while($country_id_query->fetch()) {
                $country_id = $country_id_query->civicrm_country_id;
              }
            }
          }
        }
      }

      if(!empty($country_id)) {
        $parentList = CRM_Cluster_Utils::getList(1,$country_id);
      }
      asort($parentList);
    }
    return $parentList;
  }
}